import {
  EmbedBuilder,
  SlashCommandBuilder,
  PermissionFlagsBits,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ButtonInteraction,
  ChatInputCommandInteraction, // Importar el tipo correcto para el comando slash
  Client,
  MessageComponentInteraction // O usar este tipo m치s general para el filtro
} from 'discord.js'

export default {
  data: new SlashCommandBuilder()
    .setName('ping3')
    .setDescription('Ping pong con bot칩n interactivo.')
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator) // 游댳 Solo admins pueden verlo y usarlo
    .setDMPermission(false), // 游댳 No disponible en mensajes directos

  async execute (client: Client, interaction: ChatInputCommandInteraction) { // <--- Cambiado a ChatInputCommandInteraction
    // Verificar si la interacci칩n es utilizable (importante para TypeScript)
    if (!interaction.isRepliable()) {
      console.error('La interacci칩n no se puede responder.')
      return
    }

    // Crear el embed
    const embed = new EmbedBuilder()
      .setTitle('Pong!')
      .setDescription(`游끱 Latencia API: ${client.ws.ping}ms`) // Usar Latencia API es m치s claro
      .setColor('#e00000')
      .setFooter({ text: `Solicitado por ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() }) // A침adir un pie de p치gina es buena pr치ctica

    // Crear el bot칩n
    const customButtonId = 'miBoton' // Guardar el ID en una variable para evitar errores tipogr치ficos
    const row = new ActionRowBuilder<ButtonBuilder>().addComponents( // Especificar el tipo gen칠rico para ActionRowBuilder
      new ButtonBuilder()
        .setCustomId(customButtonId) // Usar la variable
        .setLabel('Haz clic aqu칤 (secreto)')
        .setStyle(ButtonStyle.Primary)
    )

    // Enviar el mensaje con el embed y el bot칩n
    // Usamos deferReply + followUp o reply directamente. Reply es m치s simple aqu칤.
    const message = await interaction.reply({
      embeds: [embed],
      components: [row],
      fetchReply: true // Necesario para obtener el objeto Message y adjuntar el collector
    })

    // Crear un filtro para el collector
    // Solo acepta interacciones de bot칩n, con el ID correcto y del usuario original
    const filter = (i: MessageComponentInteraction) => { // Usar un tipo m치s general o ButtonInteraction
      return i.isButton() && i.customId === customButtonId && i.user.id === interaction.user.id
    }

    // Crear el collector directamente sobre el mensaje enviado
    // Tiempo l칤mite de 15 segundos (15000 ms)
    const collector = message.createMessageComponentCollector({ filter, time: 15000 })

    collector.on('collect', async (buttonInteraction: ButtonInteraction) => { // <--- 'buttonInteraction' es la interacci칩n del clic
      // Responder al clic del bot칩n de forma ef칤mera
      await buttonInteraction.reply({ // <--- Usar la interacci칩n del bot칩n (buttonInteraction) y reply
        content: '춰Pong Secreto! 游땔',
        ephemeral: true // 游댳 Solo el usuario que hizo clic ver치 este mensaje
        // No es necesario 'flags: MessageFlags.Ephemeral'
      })
      // Opcionalmente, puedes detener el collector despu칠s del primer clic v치lido si solo quieres una respuesta
      // collector.stop();
    })

    collector.on('end', collected => {
      // Opcional: Desactivar el bot칩n cuando el collector termina para que no se pueda hacer clic m치s
      const disabledRow = new ActionRowBuilder<ButtonBuilder>().addComponents(
        ButtonBuilder.from(row.components[0]).setDisabled(true) // Crear un nuevo bot칩n basado en el anterior, pero deshabilitado
      )
      // Intentar editar el mensaje original para deshabilitar el bot칩n
      // Usar interaction.editReply porque message.edit puede fallar si el bot no tiene permisos suficientes o el mensaje fue borrado
      interaction.editReply({ components: [disabledRow] }).catch(error => {
        console.warn('No se pudo editar el mensaje para deshabilitar el bot칩n:', error.message)
        // No hacer nada si falla, el bot칩n simplemente seguir치 ah칤 pero no funcionar치
      })

      if (collected.size === 0) {
        console.log(`Collector para el bot칩n '${customButtonId}' finalizado por tiempo l칤mite.`)
      } else {
        console.log(`Collector para el bot칩n '${customButtonId}' finalizado tras recoger ${collected.size} interacciones.`)
      }
    })
  }
}
